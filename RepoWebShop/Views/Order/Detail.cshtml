@model OrderDetailsViewModel
@inject ILunchRepository lunch

<style>


    .table-user-information {
        max-width: 600px;
    }

    textarea {
        resize: vertical;
        width: 100%
    }

    #successMessage {
        display: none;
        position: fixed;
        top: 60px;
        left: 40%;
    }

    #errorMessage {
        display: none;
        position: fixed;
        top: 60px;
        left: 40%;
    }
</style>



<div class="container order-detail">
    <h3>Detalles: @Model.Order.FriendlyBookingId - <a class="btn btn-info" href="/Order/InProgress">Pedidos</a></h3>

    <div class="container">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Cantidad</th>
                    <th>Producto</th>
                    <th>Precio</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td> @item.Amount </td>
                        <td> @item.Pie.PieDetail.Name @item.Pie.Name </td>
                        <td> @item.Pie.Price</td>
                    </tr>
                }
                @foreach (var item in Model.CatalogItems)
                {
                    <tr>
                        <td> @item.Amount </td>
                        <td> @item.Product.DisplayName </td>
                        <td> @item.Product.Price</td>
                    </tr>
                }
                @foreach (var item in Model.Caterings)
                {
                    <tr>
                        <td> @item.Amount </td>
                        <td> 
                            <a asp-action="Special" asp-controller="Lunch" asp-route-id="@item.Lunch.LunchId">
                                @Html.Raw(string.IsNullOrEmpty(item.Lunch.Title) ? $"Catering #{item.LunchId}" : item.Lunch.Title) 
                            </a>
                        </td>
                        <td> @lunch.GetTotal(item.Lunch)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br />

    <div>
        @{
        var paymentState = Model.Order.OrderPaymentStatus.GetType();
        var progress = Model.Order.OrderProgressState.GetType();


        if (progress == typeof(OrderInProgress))
        {
            <a class="btn btn-warning" onclick="completeOrder()" title="Comunica al cliente que la orden está lista para ser entregada">Notificar Cliente</a>
            <a class="btn btn-danger" href="/Order/UpdateOrderWithReason/Cancel/@Model.Order.OrderId">Cancelar</a>
    }


    if (progress == typeof(OrderComplete))
    {
        <a class="btn btn-success" onclick="pickUpOrder()">Orden Retirada</a>
        <a class="btn btn-warning" href="/Order/UpdateOrderWithReason/Cancel/@Model.Order.OrderId">Cancelar</a>
}

if (progress == typeof(OrderPickedUp))
{
    <a class="btn btn-warning" href="/Order/UpdateOrderWithReason/Return/@Model.Order.OrderId">Pedido retornado</a>
}

if (paymentState == typeof(OrderReservationNotPaid))
{
    <a class="btn btn-success" onclick="payOrder()">Pago recibido</a>
}

if (paymentState == typeof(OrderReservationPaid) || paymentState == typeof(OrderMercadoPagoPaid))
{
    <a class="btn btn-danger" href="/Order/UpdateOrderWithReason/Refund/@Model.Order.OrderId">Devolver dinero</a>
}

if (paymentState == typeof(OrderMercadoPagoPaymentPending))
{
    <a class="btn btn-danger" href="/Order/UpdateOrderWithReason/CancelPayment/@Model.Order.OrderId">Cancelar pago</a>
}
        }
    </div>

    <br />
    <table class="table table-user-information" >
        <tbody>
            <tr>
                <td><strong>Estado</strong></td>
                @{var cancelled = Model.Order.Cancelled ? "<div class='text-muted'>Pedido cancelado</div>" : "";}
                <td colspan="2" id="">@Model.Order.StatusSpanish @Html.Raw(cancelled)</td>
            </tr>
            @if(Model.Order.DeliveryAddress != null)
            {
                <tr>
                    <td><strong>Envío</strong></td>
                    <td colspan="2">@Model.Order.DeliveryAddress.AddressLine1</td>
                </tr>
                <tr>
                    <td><strong>Costo envío</strong></td>
                    <td colspan="2">@Model.Order.DeliveryAddress.DeliveryCost</td>
                </tr>
                @if(!String.IsNullOrWhiteSpace(Model.Order.DeliveryAddress.DeliveryInstructions))
                {
                <tr>
                    <td><strong>Instrucciones de envío</strong></td>
                    <td colspan="2">@Model.Order.DeliveryAddress.DeliveryInstructions</td>
                </tr>
                }
            }


            <tr>
                <td><strong>Total</strong></td>
                <td colspan="2">@Model.Order.OrderTotal</td>
            </tr>
            @if (Model.Order.Discount != null)
            {<tr>
                <td><strong>Descuento</strong></td>
                <td colspan="2">@Model.Order.Discount.Phrase</td>
            </tr>}
            <tr>
                <td><strong>Cliente</strong></td>
                <td colspan="2" id="">
                    @Html.Raw(Model.Order.ContactDataAsHtml)

                </td>
            </tr>
            @{
        if (!String.IsNullOrEmpty(Model.Order.CustomerComments))
        {
            <tr>
                <td><strong>Comentarios del cliente</strong></td>
                <td colspan="2">@Model.Order.CustomerComments</td>
            </tr>
}
            }
            <tr>
                <td><strong>Comentarios Administrativos</strong></td>
                <td colspan="2">
                    <div>
                        <textarea id="mgmtcomments">@Model.Order.ManagementComments</textarea>
                        <a href="#mgmtcomments" onclick="mgmtcomments()">Guardar</a>
                    </div>
                </td>
            </tr>
            <tr>
                <td><strong>Fecha Entrega</strong></td>
                <td colspan="2">
                    <div class="form-group">
                        <div class='input-group date' id='pickupdate'>
                            <input type='text' class="form-control" id="pickUpDate" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        <a href="#pickUpDate" onclick="updatePickUpDate()">Guardar</a>
                    </div>
                </td>
            </tr>
            <tr>
                <td><strong>Fecha Creacion</strong></td>
                <td colspan="2">@Model.Order.OrderPlaced.ToString("dd-MM-yyyy hh:mm:ss tt") </td>
            </tr>
            <tr>
                <td><strong>Plazo</strong></td>
                <td colspan="2">@Model.Order.PreparationTime hs.</td>
            </tr>
            <tr>
                <td><strong>Correo enviado</strong></td>
                <td colspan="2">
                    <div>
                        @if (Model.Order.Email != null)
                {
                    <p><strong>@Model.Order.Email?.To</strong> <a href="/Order/EmailSentNotification/@Model.Order.OrderId" target="_blank">Ver</a></p>
        }
                    </div>
                </td>
            </tr>
            <tr>
                <td><strong>Registro</strong></td>
                <td colspan="2">
                    <div>
                        <p>@Html.Raw(string.Join("<br/>", Model.Estados))</p>
                    </div>
                </td>
            </tr>
            <tr>
                <td><strong>Cambios</strong></td>
                <td colspan="2">
                    <div>
                        @{
                    var history = Model.Order.OrderHistory?.Split(new Char[] { ',', '\\', '\n', '\r' },
                         StringSplitOptions.RemoveEmptyEntries);
                    if (history != null)
                    {
                        <p>@Html.Raw(string.Join("<br/>", history))</p>
            }
                        }
                    </div>
                </td>
            </tr>
        </tbody>
    </table>

    <div class="alert alert-success" id="successMessage" style="">
        Cambio guardado satisfactoriamente!
    </div>
    <div class="alert alert-danger" id="errorMessage" style="">
        Ocurrio un error al guardar. Intente mas tarde.
    </div>
</div>
<script type="text/javascript">
    @{
        var pickUp = Model.Order.PickUpTimeFrom ?? Model.Order.PickUpTime;
        string defaultDate = "false";

        if (pickUp != null)
        {
            if(Model.Order.PickUpTimeFrom.HasValue)
            {
                defaultDate = Model.Order.PickUpTimeFrom.Value.ToString("s");
            }
            else
            {
                defaultDate = Model.Order.PickUpTime.Value.ToString("s");
            }
        }
    }

    var datetimepickertemp;
    $(function () {
        datetimepickertemp = $('#pickupdate').datetimepicker({
            defaultDate: "@defaultDate",
            locale: 'es',
            daysOfWeekDisabled: [1]
        });
        console.log(datetimepickertemp)
    });

    function payOrder() {
        $.ajax({
            type: 'POST',
            data: {},
            url: '/api/OrderData/PayOrder/@Model.Order.OrderId',
            success: function () {
                window.location.reload();
            },
            error: function () {
                handleError();
            }
        });
    }

    function pickUpOrder() {
        $.ajax({
            type: 'POST',
            data: {},
            url: '/api/OrderData/PickUpOrder/' + '@Model.Order.OrderId',
            success: function () {
                window.location = "/Order/InProgress";
            },
            error: function () {
                handleError();
            }
        });
    }

    function completeOrder() {
        $.ajax({
            type: 'POST',
            data: {},
            url: '/api/OrderData/CompleteOrder/' + '@Model.Order.OrderId',
            success: function () {
                window.location.reload();
            },
            error: function () {
                handleError();
            }
        });
    }


    function updatePickUpDate() {
        var date = $("input#pickUpDate").val().replace(" ", "/").replace(":", "/");


        $.ajax({
            type: 'POST',
            data: {},
            url: '/api/OrderData/UpdatePickUpDate/@Model.Order.OrderId/' + date,
            success: function () {
                handleSuccess();
            },
            error: function () {
                handleError();
            }
        });
    }

function mgmtcomments() {
    $.ajax({
        type: 'POST',
        data: {},
        url: '/api/OrderData/AddComments/' + '@Model.Order.OrderId' + '/' + $('textarea#mgmtcomments').val(),
        success: function () {
            handleSuccess();
        },
        error: function () {
            handleError();
        }
    });
}

function handleSuccess() {
    $('#successMessage').fadeIn(1000).fadeOut(2000);
}
function handleError() {
    $('#errorMessage').fadeIn(1000).fadeOut(2000);
    }

    $(document).on('click', 'a[href^="#"]', function (event) {
        event.preventDefault();
    });
</script>

