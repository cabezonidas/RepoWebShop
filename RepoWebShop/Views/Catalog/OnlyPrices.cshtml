@{Layout = string.Empty;}
@model IEnumerable<Product>
@inject ICalendarRepository calendar
<link href="https://fonts.googleapis.com/css?family=Noto+Serif" rel="stylesheet">
    <style>
        .container {
        }
        td {
            padding-left: 5px;
            padding-right: 5px;
            font-family: 'Noto Serif';
            font-size: 15px;
            text-align: right;
            padding-bottom: 8px;
        }
        th {
            padding-left: 5px;
            padding-right: 5px;
            font-family: 'Noto Serif';
            font-size: 12px;
            text-align: right;
        }
        .product {
            text-align: left;
        }
        .pagebreak {
            page-break-before: always;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        tr:hover {
            background-color: #ddd;
        }

        th {
            padding-top: 5px;
            padding-bottom: 5px;
            text-align: right;
            background-color: white;
            color: dimgrey;
        }
        table {
            width: 100%;
        }
    </style>
    <div class="container">
    @{
        var categories = Model.Select(x => x.Category.ToLower()).Distinct().ToArray();
        for (int i = 0; i < categories.Length; i++)
        {
            <br />
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th class="product" colspan="1">
                            @categories[i].ToUpper()
                        </th>
                        <th colspan="1">@calendar.FriendlyDate(calendar.LocalTime()) de @calendar.LocalTime().Year</th>
                    </tr>
                    <tr>
                        <th class="product">Producto</th>
                        <th>Precio en Tienda</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var prod in Model.Where(x => x.Category.ToLower() == categories[i]).OrderBy(x => x.PriceInStore).OrderBy(x => x.PieDetail.Name.Trim()))
                    { 
                        <tr>
                            <td class="product">
                            @if (prod.MinOrderAmount > 1)
                            {
                                <span style="">@prod.MinOrderAmount </span>
                            }
                            @prod.DisplayName
                            </td>

                            <td>
                            @if (prod.MinOrderAmount > 1)
                            {
                                <span style="">
                                    @Html.Raw((prod.PriceInStore * prod.MinOrderAmount).ToString("c"))
                                </span>
                                <span style="font-size: small">
                                    (@prod.PriceInStore.ToString("c") c/u)
                                </span>
                            }
                            else
                            {
                                @prod.PriceInStore.ToString("c")
                            }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            @if (i != categories.Length - 1)
            {
                <div class="pagebreak"> </div>
            }
        }
        <div class="pagebreak"> </div>
        var dif = Model.Where(x => x.PriceInStore > x.Price).OrderBy(x => x.DisplayName).OrderByDescending(x => x.Category);
        <br />
        <table class="table table-striped">
            <thead>
                <tr>
                    <th colspan="3">@calendar.FriendlyDate(calendar.LocalTime()) de @calendar.LocalTime().Year</th>
                </tr>
                <tr>
                    <th style="text-align: left"class="product">Tipo</th>
                    <th style="text-align: left">Producto</th>
                    <th>Precio Online</th>
                </tr>
            </thead>
            <tbody>
                    @foreach (var prod in dif)
                    {
                    <tr>
                        <td style="text-align: left">@prod.Category</td>
                        <td class="product">
                        @if (prod.MinOrderAmount > 1)
                        {
                            <span style="">@prod.MinOrderAmount </span>
                        }
                        @prod.DisplayName
                        </td>

                        <td>
                        @{ 
                            var onlinePrice = prod.MinOrderAmount * prod.Price;
                            var storePrice = prod.MinOrderAmount * prod.PriceInStore;
                            var priceDif = storePrice - onlinePrice;

                            if (prod.MinOrderAmount > 1)
                            {
                                <span style="">
                                    @onlinePrice.ToString("c") (-@priceDif.ToString("c"))
                                </span>
                                <span style="font-size: small">
                                    @prod.Price.ToString("c") c/u (-@Html.Raw((priceDif / 12).ToString("c")) )
                                </span>
                            }
                            else
                            {
                                <span>
                                    @onlinePrice.ToString("c") (-@priceDif.ToString("c"))
                                </span>
                            }
                        }
                        </td>
                    </tr>
                    }
            </tbody>
        </table>
}
    </div>
    <script>
    window.print();
    </script>
