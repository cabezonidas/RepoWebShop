// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using RepoWebShop.Models;
using System;

namespace RepoWebShop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180621061554_afipdata3")]
    partial class afipdata3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RepoWebShop.Models.AdminNotification", b =>
                {
                    b.Property<int>("AdminNotificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminUser");

                    b.Property<string>("Phone");

                    b.HasKey("AdminNotificationId");

                    b.ToTable("AdminNotifications");
                });

            modelBuilder.Entity("RepoWebShop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FacebookNameIdentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(50);

                    b.Property<string>("GoogleNameIdentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhoneNumberDeclared");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("State")
                        .HasMaxLength(50);

                    b.Property<string>("StreetName")
                        .HasMaxLength(100);

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(100);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime?>("ValidationMailToken");

                    b.Property<string>("ValidationPhoneToken");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RepoWebShop.Models.BookingRecord", b =>
                {
                    b.Property<int>("BookingRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Ip");

                    b.HasKey("BookingRecordId");

                    b.ToTable("BookingRecords");
                });

            modelBuilder.Entity("RepoWebShop.Models.Cae", b =>
                {
                    b.Property<int>("CaeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CAE");

                    b.Property<string>("CAEFchVto");

                    b.Property<long>("CbteDesde");

                    b.Property<string>("CbteFch");

                    b.Property<long>("CbteHasta");

                    b.Property<int>("Concepto");

                    b.Property<long>("DocNro");

                    b.Property<int>("DocTipo");

                    b.Property<int?>("InvoiceDataId");

                    b.Property<string>("Resultado");

                    b.HasKey("CaeId");

                    b.HasIndex("InvoiceDataId");

                    b.ToTable("Caes");
                });

            modelBuilder.Entity("RepoWebShop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<string>("Description");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RepoWebShop.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Company");

                    b.Property<string>("Connection");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Keywords");

                    b.Property<string>("Lastname");

                    b.Property<string>("Name");

                    b.Property<string>("PrivatePhone");

                    b.Property<string>("WorkPhone");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("RepoWebShop.Models.Cuit", b =>
                {
                    b.Property<int>("CuitId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<long>("Number");

                    b.Property<bool>("Valid");

                    b.HasKey("CuitId");

                    b.ToTable("Cuits");
                });

            modelBuilder.Entity("RepoWebShop.Models.DeliveryAddress", b =>
                {
                    b.Property<int>("DeliveryAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("DeliveryCost");

                    b.Property<string>("DeliveryInstructions")
                        .HasMaxLength(256);

                    b.Property<int>("Distance");

                    b.Property<string>("ShoppingCartId");

                    b.Property<string>("State")
                        .HasMaxLength(50);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserId");

                    b.Property<string>("ZipCode");

                    b.HasKey("DeliveryAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryAddresses");
                });

            modelBuilder.Entity("RepoWebShop.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Base");

                    b.Property<string>("Comments")
                        .HasMaxLength(5000);

                    b.Property<int>("DurationDays");

                    b.Property<int?>("InstancesLeft");

                    b.Property<bool>("IsActive");

                    b.Property<int>("Percentage");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<decimal>("Roof");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<bool>("Weekly");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("RepoWebShop.Models.Email", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bcc");

                    b.Property<string>("Body");

                    b.Property<string>("Cc");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.Property<string>("To");

                    b.HasKey("EmailId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("RepoWebShop.Models.EmailMarketingHistory", b =>
                {
                    b.Property<int>("EmailMarketingHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int?>("EmailTemplateEmailMarketingTemplateId");

                    b.Property<DateTime>("Sent");

                    b.HasKey("EmailMarketingHistoryId");

                    b.HasIndex("EmailTemplateEmailMarketingTemplateId");

                    b.ToTable("EmailMarketingHistory");
                });

            modelBuilder.Entity("RepoWebShop.Models.EmailMarketingTemplate", b =>
                {
                    b.Property<int>("EmailMarketingTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("EmailBody");

                    b.Property<string>("Title");

                    b.HasKey("EmailMarketingTemplateId");

                    b.ToTable("EmailMarketingTemplates");
                });

            modelBuilder.Entity("RepoWebShop.Models.GalleryFlickrAlbum", b =>
                {
                    b.Property<int>("GalleryFlickrAlbumId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("FlickrSetId");

                    b.Property<bool>("InGallery");

                    b.HasKey("GalleryFlickrAlbumId");

                    b.ToTable("GalleryFlickrAlbums");
                });

            modelBuilder.Entity("RepoWebShop.Models.InvoiceData", b =>
                {
                    b.Property<int>("InvoiceDataId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CantReg");

                    b.Property<int>("CbteTipo");

                    b.Property<DateTime>("Created");

                    b.Property<long>("Cuit");

                    b.Property<string>("FchProceso");

                    b.Property<int>("OrderId");

                    b.Property<int>("PtoVta");

                    b.Property<string>("Reproceso");

                    b.Property<string>("Resultado");

                    b.HasKey("InvoiceDataId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("InvoiceData");
                });

            modelBuilder.Entity("RepoWebShop.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<int>("InvoiceDataId");

                    b.Property<string>("Msg");

                    b.Property<string>("Type");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("InvoiceDataId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("RepoWebShop.Models.Lunch", b =>
                {
                    b.Property<int>("LunchId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Attendants");

                    b.Property<string>("Comments");

                    b.Property<string>("Description");

                    b.Property<int>("EventDuration");

                    b.Property<bool>("IsCombo");

                    b.Property<bool>("IsGeneric");

                    b.Property<int>("PreparationTime");

                    b.Property<string>("ThumbnailUrl");

                    b.Property<string>("Title");

                    b.HasKey("LunchId");

                    b.ToTable("Lunch");
                });

            modelBuilder.Entity("RepoWebShop.Models.LunchItem", b =>
                {
                    b.Property<int>("LunchItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LunchId");

                    b.Property<int?>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("LunchItemId");

                    b.HasIndex("LunchId");

                    b.HasIndex("ProductId");

                    b.ToTable("LunchItems");
                });

            modelBuilder.Entity("RepoWebShop.Models.LunchMiscellaneous", b =>
                {
                    b.Property<int>("LunchMiscellaneousId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("LunchId");

                    b.Property<decimal>("Price");

                    b.Property<int>("Quantity");

                    b.HasKey("LunchMiscellaneousId");

                    b.HasIndex("LunchId");

                    b.ToTable("LunchMiscellanea");
                });

            modelBuilder.Entity("RepoWebShop.Models.OpenHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayId");

                    b.Property<TimeSpan>("Duration");

                    b.Property<TimeSpan>("StartingAt");

                    b.HasKey("Id");

                    b.ToTable("OpenHours");
                });

            modelBuilder.Entity("RepoWebShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingId");

                    b.Property<bool>("Cancelled");

                    b.Property<string>("CardHolderName");

                    b.Property<string>("CardHolderNumber");

                    b.Property<string>("CardHolderType");

                    b.Property<long>("Cuit");

                    b.Property<string>("CustomerComments");

                    b.Property<int?>("DeliveryAddressId");

                    b.Property<int?>("DiscountId");

                    b.Property<int?>("EmailId");

                    b.Property<bool>("Finished");

                    b.Property<string>("ManagementComments");

                    b.Property<string>("MercadoPagoMail");

                    b.Property<string>("MercadoPagoName");

                    b.Property<string>("MercadoPagoTransaction");

                    b.Property<string>("MercadoPagoUsername");

                    b.Property<string>("OrderHistory");

                    b.Property<DateTime>("OrderPlaced");

                    b.Property<decimal>("OrderTotal");

                    b.Property<string>("PayerIdNumber");

                    b.Property<string>("PayerIdType");

                    b.Property<bool>("PaymentReceived");

                    b.Property<DateTime?>("Payout");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("PickUpTime");

                    b.Property<DateTime?>("PickUpTimeFrom");

                    b.Property<bool>("PickedUp");

                    b.Property<int>("PreparationTime");

                    b.Property<bool>("Refunded");

                    b.Property<string>("RegistrationId");

                    b.Property<bool>("Returned");

                    b.Property<string>("Status");

                    b.Property<TimeSpan?>("TimeLeftUntilStoreCloses");

                    b.Property<decimal>("TotalInStore");

                    b.HasKey("OrderId");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("EmailId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RepoWebShop.Models.OrderCatalogItem", b =>
                {
                    b.Property<int>("OrderCatalogItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int>("OrderId");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductId");

                    b.HasKey("OrderCatalogItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderCatalogItems");
                });

            modelBuilder.Entity("RepoWebShop.Models.OrderCatering", b =>
                {
                    b.Property<int>("OrderCateringId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("BookingId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("LunchId");

                    b.Property<int>("OrderId");

                    b.HasKey("OrderCateringId");

                    b.HasIndex("LunchId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCaterings");
                });

            modelBuilder.Entity("RepoWebShop.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int>("OrderId");

                    b.Property<int>("PieId");

                    b.Property<decimal>("Price");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PieId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("RepoWebShop.Models.PageVisit", b =>
                {
                    b.Property<int>("PageVisitId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingId");

                    b.Property<string>("Ip");

                    b.Property<string>("Path");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("Visited");

                    b.HasKey("PageVisitId");

                    b.HasIndex("UserId");

                    b.ToTable("PageVisits");
                });

            modelBuilder.Entity("RepoWebShop.Models.PaymentNotice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area_Code");

                    b.Property<string>("BookingId");

                    b.Property<string>("CardHolderName");

                    b.Property<string>("CardHolderNumber");

                    b.Property<string>("CardHolderType");

                    b.Property<decimal>("Concept_Amount");

                    b.Property<string>("Currency_Id");

                    b.Property<DateTime?>("Date_Approved");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<string>("Extension");

                    b.Property<decimal?>("Installment_Amount");

                    b.Property<int>("Installments");

                    b.Property<string>("MercadoPagoMail");

                    b.Property<string>("MercadoPagoName");

                    b.Property<string>("MercadoPagoTransaction");

                    b.Property<string>("MercadoPagoUsername");

                    b.Property<string>("Merchant_Order_Id");

                    b.Property<DateTime?>("Money_Release_Date");

                    b.Property<decimal>("Net_Received_Amount");

                    b.Property<string>("Operation_Type");

                    b.Property<decimal>("OrderTotal");

                    b.Property<string>("Order_Id");

                    b.Property<string>("PayerIdNumber");

                    b.Property<string>("PayerIdType");

                    b.Property<bool>("PaymentReceived");

                    b.Property<string>("Payment_Id");

                    b.Property<string>("Payment_Type");

                    b.Property<DateTime?>("Payout");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Reason");

                    b.Property<string>("Site_Id");

                    b.Property<string>("Status");

                    b.Property<string>("Status_Detail");

                    b.Property<decimal>("Total_Paid_Amount");

                    b.Property<decimal>("Transaction_Amount");

                    b.Property<int>("Transaction_Order_Id");

                    b.Property<string>("User_Id");

                    b.HasKey("Id");

                    b.ToTable("PaymentNotices");
                });

            modelBuilder.Entity("RepoWebShop.Models.Pie", b =>
                {
                    b.Property<int>("PieId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PieDetailId");

                    b.Property<decimal>("Price");

                    b.Property<string>("SizeDescription")
                        .IsRequired();

                    b.Property<decimal?>("StorePrice");

                    b.HasKey("PieId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PieDetailId");

                    b.ToTable("Pies");
                });

            modelBuilder.Entity("RepoWebShop.Models.PieDetail", b =>
                {
                    b.Property<int>("PieDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("FlickrAlbumId");

                    b.Property<string>("Ingredients");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPieOfTheWeek");

                    b.Property<string>("LongDescription");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ShortDescription");

                    b.HasKey("PieDetailId");

                    b.ToTable("PieDetails");
                });

            modelBuilder.Entity("RepoWebShop.Models.PrintQueue", b =>
                {
                    b.Property<int>("PrintQueueId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Completed");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Message");

                    b.Property<string>("Printer");

                    b.Property<bool>("Printing");

                    b.HasKey("PrintQueueId");

                    b.ToTable("PrintQueue");
                });

            modelBuilder.Entity("RepoWebShop.Models.ProcessingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayId");

                    b.Property<TimeSpan>("Duration");

                    b.Property<TimeSpan>("StartingAt");

                    b.HasKey("Id");

                    b.ToTable("ProcessingHours");
                });

            modelBuilder.Entity("RepoWebShop.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Flavour");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsOnSale");

                    b.Property<int>("MinOrderAmount");

                    b.Property<int>("MultipleAmount");

                    b.Property<string>("Name");

                    b.Property<decimal?>("OldPrice");

                    b.Property<decimal?>("OldPriceInStore");

                    b.Property<int?>("PieDetailId");

                    b.Property<int>("Portions");

                    b.Property<int>("PreparationTime");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("PriceInStore");

                    b.Property<string>("SizeDescription");

                    b.Property<string>("Temperature");

                    b.HasKey("ProductId");

                    b.HasIndex("PieDetailId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RepoWebShop.Models.PublicHoliday", b =>
                {
                    b.Property<int>("PublicHolidayId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int?>("OpenHoursId");

                    b.Property<int?>("ProcessingHoursId");

                    b.HasKey("PublicHolidayId");

                    b.HasIndex("OpenHoursId");

                    b.HasIndex("ProcessingHoursId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("RepoWebShop.Models.Session", b =>
                {
                    b.Property<string>("Id");

                    b.Property<DateTimeOffset?>("AbsoluteExpiration");

                    b.Property<DateTimeOffset>("ExpiresAtTime");

                    b.Property<long?>("SlidingExpirationInSeconds");

                    b.Property<byte[]>("Value");

                    b.HasKey("Id");

                    b.ToTable("ServerCache");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartByIp", b =>
                {
                    b.Property<int>("ShoppingCartByIpId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingId");

                    b.Property<string>("Ip");

                    b.HasKey("ShoppingCartByIpId");

                    b.ToTable("ShoppingCartByIp");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartCatalogItem", b =>
                {
                    b.Property<int>("ShoppingCartCatalogItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("ProductId");

                    b.Property<string>("ShoppingCartId");

                    b.HasKey("ShoppingCartCatalogItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartCatalogProducts");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartComboCatering", b =>
                {
                    b.Property<int>("ShoppingCartComboCateringId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("BookingId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("LunchId");

                    b.HasKey("ShoppingCartComboCateringId");

                    b.HasIndex("LunchId");

                    b.ToTable("ShoppingCartCaterings");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartComment", b =>
                {
                    b.Property<int>("ShoppingCartCommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<string>("ShoppingCartId");

                    b.HasKey("ShoppingCartCommentId");

                    b.ToTable("ShoppingCartComments");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartCuit", b =>
                {
                    b.Property<int>("ShoppingCartCuitId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Cuit");

                    b.Property<string>("ShoppingCartId");

                    b.HasKey("ShoppingCartCuitId");

                    b.ToTable("ShoppingCartCuits");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartData", b =>
                {
                    b.Property<int>("ShoppingCartDataId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("MercadoPagoPreferenceId");

                    b.HasKey("ShoppingCartDataId");

                    b.ToTable("ShoppingCartData");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartDiscount", b =>
                {
                    b.Property<int>("ShoppingCartDiscountId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DiscountId");

                    b.Property<string>("ShoppingCartId");

                    b.HasKey("ShoppingCartDiscountId");

                    b.HasIndex("DiscountId");

                    b.ToTable("ShoppingCartDiscount");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int?>("PieId");

                    b.Property<string>("ShoppingCartId");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("PieId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartLunch", b =>
                {
                    b.Property<int>("ShoppingCartLunchId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingId");

                    b.Property<int?>("LunchId");

                    b.HasKey("ShoppingCartLunchId");

                    b.HasIndex("LunchId");

                    b.ToTable("ShoppingCartCustomLunch");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartPickUpDate", b =>
                {
                    b.Property<int>("ShoppingCartPickUpDateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingId");

                    b.Property<DateTime>("From");

                    b.Property<string>("Message");

                    b.Property<TimeSpan>("To");

                    b.Property<bool>("UserSubmitted");

                    b.HasKey("ShoppingCartPickUpDateId");

                    b.ToTable("ShoppingCartPickUpDates");
                });

            modelBuilder.Entity("RepoWebShop.Models.SiteException", b =>
                {
                    b.Property<int>("SiteExceptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Error");

                    b.Property<string>("Ip");

                    b.Property<string>("Path");

                    b.Property<string>("StuckTrace");

                    b.Property<string>("UserId");

                    b.HasKey("SiteExceptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Exceptions");
                });

            modelBuilder.Entity("RepoWebShop.Models.SmsHistory", b =>
                {
                    b.Property<int>("SmsHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Destintation");

                    b.HasKey("SmsHistoryId");

                    b.ToTable("SmsHistory");
                });

            modelBuilder.Entity("RepoWebShop.Models.Unsubscribe", b =>
                {
                    b.Property<string>("UnsubscribeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<DateTime>("Unsubscribed");

                    b.HasKey("UnsubscribeId");

                    b.ToTable("Unsubscribed");
                });

            modelBuilder.Entity("RepoWebShop.Models.Vacation", b =>
                {
                    b.Property<int>("VacationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("VacationId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RepoWebShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RepoWebShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RepoWebShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RepoWebShop.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RepoWebShop.Models.Cae", b =>
                {
                    b.HasOne("RepoWebShop.Models.InvoiceData", "InvoiceData")
                        .WithMany("Caes")
                        .HasForeignKey("InvoiceDataId");
                });

            modelBuilder.Entity("RepoWebShop.Models.DeliveryAddress", b =>
                {
                    b.HasOne("RepoWebShop.Models.ApplicationUser", "User")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RepoWebShop.Models.EmailMarketingHistory", b =>
                {
                    b.HasOne("RepoWebShop.Models.EmailMarketingTemplate", "EmailTemplate")
                        .WithMany()
                        .HasForeignKey("EmailTemplateEmailMarketingTemplateId");
                });

            modelBuilder.Entity("RepoWebShop.Models.InvoiceData", b =>
                {
                    b.HasOne("RepoWebShop.Models.Order", "Order")
                        .WithOne("Factura")
                        .HasForeignKey("RepoWebShop.Models.InvoiceData", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RepoWebShop.Models.InvoiceDetail", b =>
                {
                    b.HasOne("RepoWebShop.Models.InvoiceData", "InvoiceData")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RepoWebShop.Models.LunchItem", b =>
                {
                    b.HasOne("RepoWebShop.Models.Lunch", "Lunch")
                        .WithMany("Items")
                        .HasForeignKey("LunchId");

                    b.HasOne("RepoWebShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("RepoWebShop.Models.LunchMiscellaneous", b =>
                {
                    b.HasOne("RepoWebShop.Models.Lunch", "Lunch")
                        .WithMany("Miscellanea")
                        .HasForeignKey("LunchId");
                });

            modelBuilder.Entity("RepoWebShop.Models.Order", b =>
                {
                    b.HasOne("RepoWebShop.Models.DeliveryAddress", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId");

                    b.HasOne("RepoWebShop.Models.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("RepoWebShop.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId");

                    b.HasOne("RepoWebShop.Models.ApplicationUser", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationId");
                });

            modelBuilder.Entity("RepoWebShop.Models.OrderCatalogItem", b =>
                {
                    b.HasOne("RepoWebShop.Models.Order", "Order")
                        .WithMany("OrderCatalogItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RepoWebShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RepoWebShop.Models.OrderCatering", b =>
                {
                    b.HasOne("RepoWebShop.Models.Lunch", "Lunch")
                        .WithMany()
                        .HasForeignKey("LunchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RepoWebShop.Models.Order", "Order")
                        .WithMany("OrderCaterings")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RepoWebShop.Models.OrderDetail", b =>
                {
                    b.HasOne("RepoWebShop.Models.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RepoWebShop.Models.Pie", "Pie")
                        .WithMany()
                        .HasForeignKey("PieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RepoWebShop.Models.PageVisit", b =>
                {
                    b.HasOne("RepoWebShop.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RepoWebShop.Models.Pie", b =>
                {
                    b.HasOne("RepoWebShop.Models.Category")
                        .WithMany("Pies")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RepoWebShop.Models.PieDetail", "PieDetail")
                        .WithMany()
                        .HasForeignKey("PieDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RepoWebShop.Models.Product", b =>
                {
                    b.HasOne("RepoWebShop.Models.PieDetail", "PieDetail")
                        .WithMany()
                        .HasForeignKey("PieDetailId");
                });

            modelBuilder.Entity("RepoWebShop.Models.PublicHoliday", b =>
                {
                    b.HasOne("RepoWebShop.Models.OpenHours", "OpenHours")
                        .WithMany()
                        .HasForeignKey("OpenHoursId");

                    b.HasOne("RepoWebShop.Models.ProcessingHours", "ProcessingHours")
                        .WithMany()
                        .HasForeignKey("ProcessingHoursId");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartCatalogItem", b =>
                {
                    b.HasOne("RepoWebShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartComboCatering", b =>
                {
                    b.HasOne("RepoWebShop.Models.Lunch", "Lunch")
                        .WithMany()
                        .HasForeignKey("LunchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartDiscount", b =>
                {
                    b.HasOne("RepoWebShop.Models.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("RepoWebShop.Models.Pie", "Pie")
                        .WithMany()
                        .HasForeignKey("PieId");
                });

            modelBuilder.Entity("RepoWebShop.Models.ShoppingCartLunch", b =>
                {
                    b.HasOne("RepoWebShop.Models.Lunch", "Lunch")
                        .WithMany()
                        .HasForeignKey("LunchId");
                });

            modelBuilder.Entity("RepoWebShop.Models.SiteException", b =>
                {
                    b.HasOne("RepoWebShop.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
